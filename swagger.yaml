openapi: 3.0.0
info:
  title: RESTFUL_API
  contact: {}
  version: '1.0'
servers:
- url: https://restfulapy.onrender.com/api/v1
  variables: {}
paths:
  /register:
    post:
      tags:
      - Auth
      summary: REGISTER
      operationId: REGISTER
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/REGISTERREQUEST'
              - example:
                  username: john1
                  email: john1@gmail.com
                  password: john
                  confirmPassword: john
            example:
              username: john1
              email: john1@gmail.com
              password: john
              confirmPassword: john
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /login:
    post:
      tags:
      - Auth
      summary: LOGIN
      operationId: LOGIN
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/LOGINREQUEST'
              - example:
                  email: john1@gmail.com
                  password: john
            example:
              email: john1@gmail.com
              password: john
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /product:
    post:
      tags:
      - PRODUCT
      summary: CREATE PRODUCT
      operationId: CREATEPRODUCT
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/CREATEPRODUCTREQUEST'
              - example:
                  product_name: Iphone
                  price: '15000'
            example:
              product_name: Iphone
              price: '15000'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /product/:
    get:
      tags:
      - PRODUCT
      summary: GET ALL PRODUCTS
      operationId: GETALLPRODUCTS
      parameters:
      - name: field
        in: query
        description: Select certain fields to display e.g Product_name/Price/ID.
        style: form
        explode: true
        schema:
          type: string
          example: product_name
      - name: limit
        in: query
        description: Decide the limit of your search results. Default is 5 results per page.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: name
        in: query
        description: Filter the database by name e.g Shoes, Iphones.
        style: form
        explode: true
        schema:
          type: string
          example: shoes
      - name: numerical
        in: query
        description: Find certain products with specific price ranges.
        style: form
        explode: true
        schema:
          type: string
          example: price>1000
      - name: page
        in: query
        description: Decide what page you want to access in the query. Default is page 1.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          example: 1
      - name: sort
        in: query
        description: Sort result alphabetically or numerically in ascending or descending order.
        style: form
        explode: true
        schema:
          type: string
          example: -product_name
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /product/{id}:
    get:
      tags:
      - PRODUCT
      summary: GET SINGLE PRODUCT
      operationId: GETSINGLEPRODUCT
      parameters:
      - name: id
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    patch:
      tags:
      - PRODUCT
      summary: UPDATE PRODUCT
      operationId: UPDATEPRODUCT
      parameters:
      - name: id
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UPDATEPRODUCTREQUEST'
              - example:
                  product_name: Nokia
                  price: '250'
            example:
              product_name: Nokia
              price: '250'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    delete:
      tags:
      - PRODUCT
      summary: DELETE PRODUCT
      operationId: DELETEPRODUCT
      parameters:
      - name: id
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
components:
  schemas:
    REGISTERREQUEST:
      title: REGISTERREQUEST
      required:
      - username
      - email
      - password
      - confirmPassword
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
      example:
        username: john1
        email: john1@gmail.com
        password: john
        confirmPassword: john
    LOGINREQUEST:
      title: LOGINREQUEST
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: john1@gmail.com
        password: john
    CREATEPRODUCTREQUEST:
      title: CREATEPRODUCTREQUEST
      required:
      - product_name
      - price
      type: object
      properties:
        product_name:
          type: string
        price:
          type: string
      example:
        product_name: Iphone
        price: $150
    UPDATEPRODUCTREQUEST:
      title: UPDATEPRODUCTREQUEST
      required:
      - product_name
      - price
      type: object
      properties:
        product_name:
          type: string
        price:
          type: string
      example:
        product_name: Nokia
        price: $250
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
- name: Auth
  description: ''
- name: PRODUCT
  description: ''
